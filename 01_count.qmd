---
title: "Using APIs"
subtitle: "SICSS, 2022"
author: Christopher Barrie
format:
  revealjs:
    chalkboard: true
editor: visual
---

## Introduction

-   Why count tweets?
    -   Test your API call

    -   Of substantive interest

        -   But... design considerations (normalizing)

## Counting tweets

```{r, eval = T, echo = F}
library(academictwitteR)
library(dplyr)
library(lubridate)
library(ggplot2)
```

```{r, eval = F, echo = T}
#| code-line-numbers: "|6|7|8|9|10|11"

library(academictwitteR)
library(dplyr)
library(lubridate)
library(ggplot2)

tweetcounts <- count_all_tweets(
  query = "Hogmanay",
  start_tweets = "2019-12-27T00:00:00Z",
  end_tweets = "2020-01-05T00:00:00Z",
  bearer_token = get_bearer(),
  granularity = "hour",
  n = 500
)
```

## Format date

```{r, eval = F, echo = T}

tweetcounts$time <-
  parse_date_time(tweetcounts$start, 
                  orders = "ymd HMS")
```

## 

```{r, echo = F, eval = T}
tweetcounts <- readRDS("data/hogmanay.rds")
```

::: panel-tabset
### Tab A

```{r, echo = F, eval = T}
tweetcounts <- readRDS("data/hogmanay.rds")
```

```{r, echo = T, eval = T}
head(tweetcounts)
```

### Tab B

```{r, eval = T, echo = T}
tweetcounts %>% ggplot() +
  geom_line(aes(time, tweet_count))
```
:::

## Adding arguments

```{r, eval = F, echo = T}
#| code-line-numbers: "|3|4|5"

tweetcounts <- count_all_tweets(
  query = "Hogmanay",
  place = "Edinburgh",
  is_retweet = F,
  has_images = T,
  start_tweets = "2019-12-27T00:00:00Z",
  end_tweets = "2020-01-05T00:00:00Z",
  bearer_token = get_bearer(),
  granularity = "hour",
  n = 500
)
```

## Adding user parameters

```{r, eval = T, echo = F}
tweetcounts <- readRDS("data/edhogmanaycounts.rds")

```

```{r, eval = F, echo = T}
#| code-line-numbers: "|3|4|5"

tweetcounts <- count_all_tweets(
  query = "Hogmanay",
  users = "edhogmanay",
  start_tweets = "2019-12-27T00:00:00Z",
  end_tweets = "2020-01-05T00:00:00Z",
  bearer_token = get_bearer(),
  granularity = "day",
  n = 500
)

tweetcounts

```

```{r, eval = T, echo = F}
tweetcounts
```

## Normalizing

::: panel-tabset
### Counts

```{r, echo = F, eval = T}
tweetcounts <- readRDS("data/immigcounts.rds")
baselinecounts <- readRDS("data/baselinecounts.rds")
```

```{r, echo = T, eval = F}
tweetcounts <- count_all_tweets(
  query = "immigration",
  start_tweets = "2015-12-27T00:00:00Z",
  end_tweets = "2020-01-05T00:00:00Z",
  bearer_token = get_bearer(),
  granularity = "day",
  n = 5000
)
```

### Baseline

```{r, eval = F, echo = T}
baselinecounts <- count_all_tweets(
  query = "therefore",
  start_tweets = "2015-12-27T00:00:00Z",
  end_tweets = "2020-01-05T00:00:00Z",
  bearer_token = get_bearer(),
  granularity = "day",
  n = 5000
)
```

### Normalize

```{r, eval = T, echo = T}
normalize_counts <- function(tweetcounts, baselinecounts) {
  tweetcounts <- tweetcounts$tweet_count
  baselinecounts <- baselinecounts$tweet_count
  normalized_counts <- tweetcounts/baselinecounts
  return(normalized_counts)
}

tweetcounts$normalized_count <-
  normalize_counts(tweetcounts = tweetcounts,
                   baselinecounts = baselinecounts)

head(tweetcounts$normalized_count)
```

### Plot 1

```{r, eval = T, echo = F}
tweetcounts$day <-
  parse_date_time(tweetcounts$start, 
                  orders = "ymd HMS")

tweetcounts %>% ggplot() +
  geom_line(aes(day, tweet_count)) +
  theme(legend.position = "none",
        axis.text.y = element_blank()) + 
  labs(title = "Immigration tweet counts (raw)",
       x= "Day", y = "N. tweets")

```

### Plot 2

```{r, eval = T, echo = F}
tweetcounts %>% ggplot() +
  geom_line(aes(day, normalized_count)) +
  theme(legend.position = "none",
        axis.text.y = element_blank()) + 
  labs(title = "Immigration tweet counts (normalized)",
       x= "Day", y = "N. tweets")

```
:::
